use sms;
show tables;


-- ####################  TASK 1  #######################
-- insertions

insert into students(first_name,last_name,date_of_birth,email,phone_number)VALUES
('harry','potter','2006-01-26','harry11@gmail.com',123123),
('ronald','weasley' ,'2006-01-23' ,'ronald22@gmail.com',234234 ),
('hermione','granger' , '2002-06-10' ,'grang33@gmail.com', 456321 ),
('draco','malfoy' ,'2002-09-23' ,'draco44@gmail.com',123456),
('ginni','weasley' ,'2007-08-07' ,'ginni55@gmail.com', 987654 ),
('neville','longbottom' ,'2005-02-04','neville66@gmail.com' ,789123 );


insert into teacher(first_name,last_name,email)VALUES
('dominic','toretto','dom12@gmail.com'),
('brian','walker','brian32@gmail.com'),
('tej','parker','tej21@gmail.com');

insert into courses(course_name,credits,teacher_id)values
('CS', 10,3 ),
('IT', 5, 1),
('DBMS', 15,2 ),
('AI', 3, 1);

insert into enrollments(student_id,course_id,enrollment_date)values
( 1,4 , '2024-09-23' ),
( 3,1 , '2024-01-10' ),
(1 ,3 , '2023-10-15' ),
(6 ,2 , '2024-04-09' ),
(2 ,3 , '2022-12-25' );

insert into payments(student_id,amount,payment_date)values
( 1,25000 , '2024-09-20'),
( 3, 30000, '2024-01-01'),
( 1,44000 , '2023-10-12'),
( 6, 20000, '2024-04-03'),
( 2, 10000, '2022-12-15');

select * from students;
select * from courses;
select * from enrollments;
select * from teacher;
select * from payment;

-- ################### TASK 2  ##################

/* Q1. 
insert into students(first_name,last_name,date_of_birth,email,phone_number) values
('john', 'doe' ,'1995-08-15' ,'john.doe@example.com',1234567890);
*/
 -- Q3. update email of specific teacher
update teacher set email='b.walker23@gmail.com' where teacher_id=2;

-- Q4. Write an SQL query to delete a specific enrollment record from the 
-- "Enrollments" table. Select an enrollment record based on the student and course.
delete from enrollment where student_id=1 and course_id=2;

-- 5. Update the "Courses" table to assign a specific teacher to a course. 
-- Choose any course and teacher from the respective tables.
update courses set teacher_id= 2 where course_id=2;

-- 6. Delete a specific student from the "Students" table and remove all their 
-- enrollment records from the "Enrollments" table.
delete from student where first_name='ginni';

-- 7. Update the payment amount for a specific payment record in the "Payments" table.
-- Choose any payment record and modify the payment amount.
update payments set amount=16000 where payment_id=4;

-- ############################# TASK 3 ################################
/* 1. Write an SQL query to calculate the total payments made by a specific student. 
You will need to join the "Payments" table with the "Students" table based 
on the student's ID.
*/
select s.first_name,sum(p.amount) as payment
from students s, payments p
where s.student_id=p.student_id
group by s.first_name;
/* output
first_name		payment
harry	        69000
hermione		30000
neville			16000
ronald			10000

*/
/*
2. Write an SQL query to retrieve a list of courses along with the count of students enrolled 
in each course. Use a JOIN operation between the "Courses" table and the "Enrollments" table.
*/
select c.course_name, count(s.student_id) as total
from courses c join enrollments e on c.course_id= e.course_id
			  join students s on s.student_id=e.student_id
group by c.course_name;
/*output
course_name		total
CS				1
IT				1
DBMS			2
AI				1
*/


/*
3. Write an SQL query to find the names of students who have not enrolled in any course. 
Use a LEFT JOIN between the "Students" table and the "Enrollments" table to 
identify students without enrollments.
*/
select s.first_name 
from students s left join enrollments e on s.student_id=e.student_id
where e.student_id is null ;
/* output
first_name
draco
ginni
john
*/


/*
4. Write an SQL query to retrieve the first name, last name of students, and the names of 
the courses they are enrolled in.
Use JOIN operations between the "Students" table and the "Enrollments" and "Courses" tables.
*/
select s.first_name, s.last_name ,c.course_name
from students s
join enrollments e on s.student_id= e.student_id
join courses c on c.course_id= e.course_id
order by s.first_name;

/* output
first_name   last_name   course_name
harry			potter	DBMS
harry			potter	AI
hermione		granger	CS
neville		longbottom	IT
ronald			weasley	DBMS
*/

/*
5. Create a query to list the names of teachers and the courses they are assigned to.
Join the "Teacher" table with the "Courses" table.
*/
select t.first_name, c.course_name
from teacher t join courses c on c.teacher_id=t.teacher_id;
/* output
first_name   course_name
dominic			AI
brian			IT
brian			DBMS
tej				CS
*/


/*
6. Retrieve a list of students and their enrollment dates for a specific course.
You'll need to join the "Students" table with the "Enrollments" and "Courses" tables.
*/
select s.first_name, e.enrollment_date, c.course_name
from students s
join enrollments e on s.student_id= e.student_id
join courses c on c.course_id= e.course_id
where c.course_name= 'AI';
/*output
first_name    enrollment_date    course_name
harry			2024-09-23			AI
*/


/*
7. Find the names of students who have not made any payments. Use a LEFT JOIN between the 
"Students" table and the "Payments" table and filter for students with NULL payment records.
*/
select s.first_name, s.last_name
from students s left join payments p on s.student_id=p.student_id
where p.student_id is null;
/*output
first_name   last_name
draco			malfoy
ginni			weasley
john			doe
*/


/*
8. Write a query to identify courses that have no enrollments. You'll need to use a LEFT 
JOIN between the "Courses" table and the "Enrollments" table and filter for courses 
with NULL enrollment records.
*/
select c.course_name
from courses c left join enrollments e on c.course_id=e.course_id
where e.course_id is null;
/* output
course_name

*/


/*
9. Identify students who are enrolled in more than one course.
 Use a self-join on the "Enrollments" table to find students with multiple enrollment records.
*/

select e1.student_id
from enrollments as e1, enrollments as e2
where e1.student_id= e2.student_id and e1.course_id != e2.course_id;
/*output
student_id
1
1
*/


/*
10. Find teachers who are not assigned to any courses. Use a LEFT JOIN between the "Teacher"
table and the "Courses" table and filter for teachers with NULL course assignments.
*/
select t.first_name
from teacher t left join courses c on c.teacher_id= t.teacher_id
group by t.first_name
having count(c.course_id)<1;
/*output
first_name
*/

-- ########################    task 4   ###########################333

/*
1. Write an SQL query to calculate the average number of students enrolled in each course.
Use aggregate functions and subqueries to achieve this.
*/
select avg(distinct student_id) as avg_num_of_student
from enrollments 
having count(course_id) = avg_num_of_student;

/*output
avg_num_of_student
*/

/*
2. Identify the student(s) who made the highest payment. Use a subquery to
find the maximum payment amount and then retrieve the student(s) associated with that amount.
*/
select s.first_name, max(p.amount) as highest_payment
from students s join payments p on s.student_id= p.student_id
group by s.first_name
order by highest_payment DESC;

/*output
first_name, highest_payment
'harry', '44000'
'hermione', '30000'
'neville', '16000'
'ronald', '10000'

*/

/*
3. Retrieve a list of courses with the highest number of enrollments.
 Use subqueries to find the course(s) with the maximum enrollment count.
*/
select c.course_id,c.course_name, count(e.enrollment_id) as enrollment_count
from courses c join enrollments e on c.course_id = e.course_id
group by c.course_id, c.course_name
order by enrollment_count DESC;

/*output
course_id, course_name, enrollment_count
'3', 'DBMS', '2'
'1', 'CS', '1'
'2', 'IT', '1'
'4', 'AI', '1'


*/

/*
4. Calculate the total payments made to courses taught by each teacher. Use subqueries to sum
payments for each teacher's courses.
*/
select t.first_name,sum(p.amount) as total_payment
from payments p
join students s on s.student_id= p.student_id
join enrollments e on s.student_id= e.student_id
join courses c on c.course_id= e.course_id
join teacher t on c.teacher_id=t.teacher_id
group by t.first_name
order by total_payment DESC;

/*output
first_name, total_payment
brian		95000
dominic		69000
tej			30000
*/

/*
5. Identify students who are enrolled in all available courses. 
Use subqueries to compare a student's enrollments with the total number of courses.
*/

select distinct e.course_id, e.student_id ,c. course_name
from enrollments e join courses c on c.course_id= e.course_id
order by e.course_id;

/*output
course_id, student_id, course_name
1	3	CS
2	6	IT
3	1	DBMS
3	2	DBMS
4	1	AI
*/

/*
6. Retrieve the names of teachers who have not been assigned to any courses.
Use subqueries to find teachers with no course assignments.
*/

select s.first_name 
from teacher s left join enrollments e on s.student_id=e.student_id
where e.s is null ;

/*output
first_name
draco
ginni
john
*/

/*
7. Calculate the average age of all students. Use subqueries to calculate the age of 
each student based on their date of birth.

*/
select avg(date_of_birth) from students;

/*output
avg(date_of_birth)
20033372.5714
*/

/*
8. Identify courses with no enrollments. Use subqueries to find courses 
without enrollment records.
*/
select c.course_name 
from courses c left join enrollments e on c.course_id=e.course_id
where e.course_id is null ;

/*output
course_name
*/

/*
9. Calculate the total payments made by each student for each course they are enrolled in.
 Use subqueries and aggregate functions to sum payments.
*/

select e.course_id,sum(amount) as total
from payments p
join students s on s.student_id= p.student_id
join enrollments e on s.student_id= e.student_id
group by e.course_id
order by total desc;

/*output
course_id, total
1	30000
2	16000
3	79000
4	69000
*/

/*
10. Identify students who have made more than one payment. Use subqueries and aggregate 
functions to count payments per student and filter for those with counts greater than one.
*/
select student_id
from payments
having count(student_id)>1;

/*output
student_id
1
*/

/*
11. Write an SQL query to calculate the total payments made by each student.Join the "Students"
 table with the "Payments" table and use GROUP BY to calculate the sum of payments for each
 student.

*/
select s.first_name, sum(p.amount)
from payments p
join students s on s.student_id= p.student_id
group by s.first_name;

/*output
first_name, sum(p.amount)
harry	69000
hermione	30000
neville	16000
ronald	10000
*/

/*
12. Retrieve a list of course names along with the count of students enrolled in each course.
 Use JOIN operations between the "Courses" table and the "Enrollments" table and GROUP BY to
 count enrollments.
*/
select c.course_name, count(e.enrollment_id) as total_enroll
from enrollments e join courses c on c.course_id= e.course_id
group by c.course_name;

/*output
course_name, total_enroll
CS	1
IT	1
DBMS	2
AI	1
*/

/*
13. Calculate the average payment amount made by students. Use JOIN operations between
 the "Students" table and the "Payments" table and GROUP BY to calculate the average.
*/
select s.student_id,avg(p.amount)
from payments p
join students s on s.student_id= p.student_id
group by s.student_id;

/*output
student_id, avg(p.amount)
1	34500
3	30000
6	16000
2	10000
*/


